{"version":3,"sources":["actions/actionTypes.js","reducers/index.js","sagas/index.js","store/index.js","components/Form.js","components/Message.js","components/Error.js","components/Fetching.js","components/Init.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["API_CALL_REQUEST","API_CALL_SUCCESS","API_CALL_FAILURE","initialState","fetching","message","error","reducer","state","arguments","length","undefined","action","type","watcherSaga","workerSaga","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","response","_context2","number","Error","test","Number","isInteger","call","fetchData","sent","data","includes","put","t0","_marked2","url","concat","axios","get","sagaMiddleware","createSagaMiddleware","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","composed","compose","applyMiddleware","store","createStore","run","Form","props","react_default","createElement","Fragment","ref","inputField","placeholder","className","disabled","onClick","fetchMessage","Message","Fetching","Init","Header","id","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","inputValue","current","value","getData","React","createRef","_this$props","Header_Header","Message_Message","Error_Error","Form_Form","Component","connect","dispatch","Boolean","location","hostname","match","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cf59f77.chunk.js","sourcesContent":["export const API_CALL_REQUEST = 'API_CALL_REQUEST';\nexport const API_CALL_SUCCESS = 'API_CALL_SUCCESS';\nexport const API_CALL_FAILURE = 'API_CALL_FAILURE';","import { API_CALL_REQUEST, API_CALL_SUCCESS, API_CALL_FAILURE } from '../actions/actionTypes'\n\nconst initialState = {\n  fetching: false,\n  message: null,\n  error: null\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case API_CALL_REQUEST:\n      return { fetching: true, message: null, error: null };\n    case API_CALL_SUCCESS:\n      return { fetching: false, message: action.message, error: null };\n    case API_CALL_FAILURE:\n      return { fetching: false, message: null, error: action.error };\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import { takeLatest, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  API_CALL_REQUEST,\n  API_CALL_SUCCESS,\n  API_CALL_FAILURE\n} from \"../actions/actionTypes\";\n\nexport function* watcherSaga() {\n  yield takeLatest(API_CALL_REQUEST, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    if (action.number === \"\") {\n      throw new Error(\"You have to provide a number or type random.\");\n    }\n    if (\n      !/^[+-]?[0-9]+[.]?[0-9]*$/.test(action.number) &&\n      action.number !== \"random\"\n    ) {\n      throw new Error(\"You have to provide a number or type random.\");\n    }\n    if (\n      action.number !== \"random\" &&\n      !Number.isInteger(Number(action.number))\n    ) {\n      throw new Error(\"The number must be a whole number.\");\n    }\n    if (action.number !== \"random\" && !Number(action.number) < 0) {\n      throw new Error(\"The number must be positive.\");\n    }\n    const response = yield call(() => fetchData(action.number));\n    const message = response.data;\n    if (message.includes(\"Bad Gateway\")) {\n      throw new Error(\"Bad response from the server. Try again.\");\n    }\n    yield put({ type: API_CALL_SUCCESS, message });\n  } catch (error) {\n    yield put({ type: API_CALL_FAILURE, error });\n  }\n}\n\nfunction fetchData(number) {\n  const url = `https://numbers-api-proxy.dci-fbw121.now.sh/?number=${number}`;\n  return axios.get(url);\n}\n","import createSagaMiddleware from \"redux-saga\";\nimport { compose, applyMiddleware, createStore } from \"redux\";\nimport reducer from \"../reducers\";\nimport { watcherSaga } from \"../sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst composed = compose(applyMiddleware(sagaMiddleware), reduxDevTools);\n\nexport const store = createStore(reducer, composed);\n\nsagaMiddleware.run(watcherSaga);","import React from \"react\";\nimport \"../styles/Form.scss\";\n\nexport default function Form(props) {\n  return (\n    <>\n      <div>\n        <input\n          type=\"text\"\n          ref={props.inputField}\n          placeholder=\"Please provide a number or type random\"\n        />\n      </div>\n      <div>\n        {props.fetching ? (\n          <button className=\"btn btn-warning\" disabled>\n            Fetching...\n          </button>\n        ) : (\n            <button className=\"btn btn-primary\" onClick={props.fetchMessage}>\n              Click to get info\n          </button>\n          )}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"../styles/Message.scss\";\n\nexport default function Message(props) {\n  return (\n    <div className=\"flex-container flex-row\">\n      <aside className=\"quotation quotation-left left sm-1 lg-1 as-start\">\n        <i className=\"fas fa-quote-left\" />\n      </aside>\n      <main className=\"message sm-10 lg-10\">{props.message}</main>\n      <aside className=\"quotation quotation-right right sm-1 lg-1 as-end\">\n        <i className=\"fas fa-quote-right\" />\n      </aside>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Error(props) {\n  return (\n    <div className=\"flex-container flex-row\">\n      <main className=\"error sm-10 lg-10 alert-danger\">\n        {props.error.message}\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Fetching() {\n  return (\n    <div className=\"flex-container flex-row\">\n      <main className=\"fetching sm-10 lg-10 alert-warning\">\n        Fetching a quotation from the Numbers API\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Init() {\n  return (\n    <div className=\"flex-container flex-row\">\n      <main className=\"alert-secondary sm-10 lg-10\">\n        Enter a number or \"random\" to get a quote\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../styles/Header.scss\";\n\nexport default function Header(props) {\n  return (\n    <>\n      <div className=\"header\">\n        <section className=\"number\" id=\"no-a\">\n          13\n        </section>\n        <section className=\"number\" id=\"no-b\">\n          147\n        </section>\n        <section className=\"number\" id=\"no-c\">\n          42\n        </section>\n        <section className=\"number\" id=\"no-d\">\n          27\n        </section>\n      </div>\n      <div className=\"subheader\">Numbers</div>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"../styles/App.scss\";\nimport Form from \"./Form\";\nimport { connect } from \"react-redux\";\nimport { API_CALL_REQUEST } from \"../actions/actionTypes\";\nimport Message from \"./Message\";\nimport Error from \"./Error\";\nimport Fetching from \"./Fetching\";\nimport Init from \"./Init\";\nimport Header from \"./Header\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputField = React.createRef();\n  }\n  fetchMessage = () => {\n    const inputValue = this.inputField.current.value;\n    this.props.getData(inputValue);\n  };\n  render() {\n    const { message, error, fetching } = this.props;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header />\n          {message && <Message message={message} />}\n          {error && <Error error={error} />}\n          {fetching && <Fetching />}\n          {!message && !error && !fetching && <Init />}\n          <Form\n            fetchMessage={this.fetchMessage}\n            inputField={this.inputField}\n            fetching={fetching}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    fetching: state.fetching,\n    message: state.message,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getData: number => dispatch({ type: API_CALL_REQUEST, number })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import react\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import redux\nimport { Provider } from \"react-redux\";\n// import the store\nimport { store } from \"./store\";\n// import the main component\nimport App from \"./components/App\";\n// import styles\nimport \"./styles/index.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n// import serviceWorker\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}